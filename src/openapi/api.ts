/* tslint:disable */
/* eslint-disable */
/**
 * Promptis Usage API
 * このAPIはPromptisの利用状況を収集するためのAPIです 
 *
 * The version of the OpenAPI document: 1.0.0-alpha
 * Contact: gai_dev_standard@ml.tis.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface PostUsage200Response
 */
export interface PostUsage200Response {
    /**
     * 
     * @type {string}
     * @memberof PostUsage200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface PostUsageRequest
 */
export interface PostUsageRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUsageRequest
     */
    'apiKind': PostUsageRequestApiKindEnum;
    /**
     * 
     * @type {string}
     * @memberof PostUsageRequest
     */
    'command': string;
    /**
     * 
     * @type {string}
     * @memberof PostUsageRequest
     */
    'language': string;
    /**
     * 
     * @type {string}
     * @memberof PostUsageRequest
     */
    'vscodeVersion': string;
    /**
     * 
     * @type {string}
     * @memberof PostUsageRequest
     */
    'os': string;
    /**
     * 
     * @type {string}
     * @memberof PostUsageRequest
     */
    'extensionId': string;
    /**
     * 
     * @type {string}
     * @memberof PostUsageRequest
     */
    'extensionVersion': string;
    /**
     * 
     * @type {string}
     * @memberof PostUsageRequest
     */
    'machineId': string;
}

export const PostUsageRequestApiKindEnum = {
    Activate: 'activate',
    Command: 'command',
    Test: 'test'
} as const;

export type PostUsageRequestApiKindEnum = typeof PostUsageRequestApiKindEnum[keyof typeof PostUsageRequestApiKindEnum];

/**
 * API呼び出しに問題が発生した場合のエラーレスポンス。RFC7807に準拠する 
 * @export
 * @interface Problem
 */
export interface Problem {
    [key: string]: any;

    /**
     * 問題のタイプを識別するURI
     * @type {string}
     * @memberof Problem
     */
    'type': string;
    /**
     * 問題の簡潔な説明
     * @type {string}
     * @memberof Problem
     */
    'title'?: string;
    /**
     * HTTPステータスコード
     * @type {number}
     * @memberof Problem
     */
    'status'?: number;
    /**
     * 問題の詳細な説明
     * @type {string}
     * @memberof Problem
     */
    'detail'?: string;
    /**
     * 問題が発生した特定のリソースを示すURI
     * @type {string}
     * @memberof Problem
     */
    'instance'?: string;
}

/**
 * UsageApi - axios parameter creator
 * @export
 */
export const UsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Promptisがactivateされるタイミング、および、コマンドが実行されるタイミングでこのAPIが呼び出される。 このAPIでは、個人情報に該当する情報を収集しないように注意すること 
         * @summary Promptisのコマンド実行状況を収集します
         * @param {PostUsageRequest} postUsageRequest リクエストボディは以下のプロパティを持つJSONオブジェクトであること - apiKind: \&quot;activate\&quot;、\&quot;command\&quot;、\&quot;test\&quot;のいずれか - command: \&quot;codereviewCodeStandards\&quot; などのコマンド名 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsage: async (postUsageRequest: PostUsageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUsageRequest' is not null or undefined
            assertParamExists('postUsage', 'postUsageRequest', postUsageRequest)
            const localVarPath = `/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUsageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsageApi - functional programming interface
 * @export
 */
export const UsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsageApiAxiosParamCreator(configuration)
    return {
        /**
         * Promptisがactivateされるタイミング、および、コマンドが実行されるタイミングでこのAPIが呼び出される。 このAPIでは、個人情報に該当する情報を収集しないように注意すること 
         * @summary Promptisのコマンド実行状況を収集します
         * @param {PostUsageRequest} postUsageRequest リクエストボディは以下のプロパティを持つJSONオブジェクトであること - apiKind: \&quot;activate\&quot;、\&quot;command\&quot;、\&quot;test\&quot;のいずれか - command: \&quot;codereviewCodeStandards\&quot; などのコマンド名 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUsage(postUsageRequest: PostUsageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUsage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUsage(postUsageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsageApi.postUsage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsageApi - factory interface
 * @export
 */
export const UsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsageApiFp(configuration)
    return {
        /**
         * Promptisがactivateされるタイミング、および、コマンドが実行されるタイミングでこのAPIが呼び出される。 このAPIでは、個人情報に該当する情報を収集しないように注意すること 
         * @summary Promptisのコマンド実行状況を収集します
         * @param {UsageApiPostUsageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUsage(requestParameters: UsageApiPostUsageRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostUsage200Response> {
            return localVarFp.postUsage(requestParameters.postUsageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsageApi - interface
 * @export
 * @interface UsageApi
 */
export interface UsageApiInterface {
    /**
     * Promptisがactivateされるタイミング、および、コマンドが実行されるタイミングでこのAPIが呼び出される。 このAPIでは、個人情報に該当する情報を収集しないように注意すること 
     * @summary Promptisのコマンド実行状況を収集します
     * @param {UsageApiPostUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApiInterface
     */
    postUsage(requestParameters: UsageApiPostUsageRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostUsage200Response>;

}

/**
 * Request parameters for postUsage operation in UsageApi.
 * @export
 * @interface UsageApiPostUsageRequest
 */
export interface UsageApiPostUsageRequest {
    /**
     * リクエストボディは以下のプロパティを持つJSONオブジェクトであること - apiKind: \&quot;activate\&quot;、\&quot;command\&quot;、\&quot;test\&quot;のいずれか - command: \&quot;codereviewCodeStandards\&quot; などのコマンド名 
     * @type {PostUsageRequest}
     * @memberof UsageApiPostUsage
     */
    readonly postUsageRequest: PostUsageRequest
}

/**
 * UsageApi - object-oriented interface
 * @export
 * @class UsageApi
 * @extends {BaseAPI}
 */
export class UsageApi extends BaseAPI implements UsageApiInterface {
    /**
     * Promptisがactivateされるタイミング、および、コマンドが実行されるタイミングでこのAPIが呼び出される。 このAPIでは、個人情報に該当する情報を収集しないように注意すること 
     * @summary Promptisのコマンド実行状況を収集します
     * @param {UsageApiPostUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    public postUsage(requestParameters: UsageApiPostUsageRequest, options?: RawAxiosRequestConfig) {
        return UsageApiFp(this.configuration).postUsage(requestParameters.postUsageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



